plugins:
  # Add get YAML Blames
  blame:
    shortCut: b
    confirm: false
    description: "Blame"
    scopes:
    - all
    command: sh
    background: false
    args:
    - -c
    - "kubectl-blame $RESOURCE_NAME $NAME -n $NAMESPACE --context $CONTEXT | less"

  # Add plugins for debugging
  debug:
    shortCut: Shift-D
    description: Add debug container
    dangerous: true
    scopes:
    - containers
    command: bash
    background: false
    confirm: true
    args:
    - -c
    - "kubectl debug -it --context $CONTEXT -n=$NAMESPACE $POD --target=$NAME --image=nicolaka/netshoot:v0.12 --share-processes -- zsh"

  # Add plugins for image scanning
  dive:
    shortCut: d
    confirm: true
    description: "Dive image"
    scopes:
    - containers
    command: dive
    background: false
    args:
    - $COL-IMAGE


    # Add plugins for logs
    raw-logs-follow:
      shortCut: Ctrl-L
      description: logs -f
      scopes:
      - pods
      command: kubectl
      background: false
      args:
      - logs
      - -f
      - $NAME
      - -n
      - $NAMESPACE
      - --context
      - $CONTEXT
      - --kubeconfig
      - $KUBECONFIG

    log-less:
      shortCut: Shift-L
      description: "logs|less"
      scopes:
      - pods
      command: bash
      background: false
      args:
      - -c
      - '"$@" | less'
      - dummy-arg
      - kubectl
      - logs
      - $NAME
      - -n
      - $NAMESPACE
      - --context
      - $CONTEXT
      - --kubeconfig
      - $KUBECONFIG

    # Add plugins for jq logs
    jqlogs:
      shortCut: Ctrl-J
      confirm: false
      description: "Logs (jq)"
      scopes:
      - pods
      command: kubectl
      background: false
      args:
      - jq
      - $NAME
      - $NAMESPACE
      - $CONTEXT

    stern:
      shortCut: Ctrl-L
      confirm: false
      description: "Logs <Stern>"
      scopes:
      - pods
      command: stern
      background: false
      args:
      - --tail
      - 50
      - $FILTER
      - -n
      - $NAMESPACE
      - --context
      - $CONTEXT

    # Add plugins for HELM
    helm-default-values:
      shortCut: Shift-V
      confirm: false
      description: Chart Default Values
      scopes:
      - helm
      command: sh
      background: false
      args:
      - -c
      - >-
        revision=$(helm history -n $NAMESPACE --kube-context $CONTEXT $COL-NAME | grep deployed | cut -d$'\t' -f1 | tr -d ' \t');
        kubectl
        get secrets
        --context $CONTEXT
        -n $NAMESPACE
        sh.helm.release.v1.$COL-NAME.v$revision -o yaml
        | yq e '.data.release' -
        | base64 -d
        | base64 -d
        | gunzip
        | jq -r '.chart.values'
        | yq -P
        | less -K

    # View user-supplied values when the helm chart was created
    helm-values:
      shortCut: v
      confirm: false
      description: Values
      scopes:
      - helm
      command: sh
      background: false
      args:
      - -c
      - "helm get values $COL-NAME -n $NAMESPACE --kube-context $CONTEXT | less -K"

      # Opens a shell to k3d container as root
      k3d-root-shell:
        shortCut: Shift-S
        confirm: false
        dangerous: true
        description: "Root Shell"
        scopes:
        - containers
        command: bash
        background: false
        args:
        - -c
        - |
          # Check dependencies
          command -v jq >/dev/null || { echo -e "jq is not installed (https://stedolan.github.io/jq/)\nPress 'q' to close" | less; exit 1; }
          # Extract node name and container ID
          POD_DATA="$(kubectl get pod/$POD -o json --namespace $NAMESPACE --context $CONTEXT)"
          # ${...} is used to prevent variable substitution by k9s (e.g. $POD_DATA)
          NODE_NAME=$(echo "${POD_DATA}" | jq -r '.spec.nodeName')
          CONTAINER_ID=$(echo "${POD_DATA}" | jq -r '.status.containerStatuses[] | select(.name == "$COL-NAME") | .containerID ' | grep -oP '(?<=containerd://).*')
          echo "<<K9s-Root-Shell>> Pod: $NAMESPACE/$POD | Container: $COL-NAME (${NODE_NAME}/${CONTAINER_ID})"
          # Credits for this approach to https://gist.github.com/mamiu/4944e10305bc1c3af84946b33237b0e9
          docker exec -it $NODE_NAME sh -c "runc --root /run/containerd/runc/k8s.io/ exec -t -u 0 ${CONTAINER_ID} sh"

    # Get recommendations for CPU/Memory requests and limits using Robusta KRR
    # Requires Prometheus in the Cluster and Robusta KRR (https://github.com/robusta-dev/krr) on your system
    # Open K9s in deployments/daemonsets/statefulsets view, then:
    # Shift-K to get recommendations
    krr:
      shortCut: Shift-K
      description: Get krr
      scopes:
      - deployments
      - daemonsets
      - statefulsets
      command: bash
      background: false
      confirm: false
      args:
      - -c
      - |
        LABELS=$(kubectl get $RESOURCE_NAME $NAME -n $NAMESPACE  --context $CONTEXT  --show-labels | awk '{print $NF}' | awk '{if(NR>1)print}')
        krr simple --cluster $CONTEXT --selector $LABELS 
        echo "Press 'q' to exit"
        while : ; do
        read -n 1 k <&1
        if [[ $k = q ]] ; then
        break
        fi
        done

    # Add plugins for watch events
    watch-events:
      shortCut: Shift-E
      confirm: false
      description: Get Events
      scopes:
      - all
      command: sh
      background: false
      args:
      - -c
      - "watch -n 5 kubectl get events --context $CONTEXT --namespace $NAMESPACE --field-selector involvedObject.name=$NAME"

    # Add plugins for Cert Manager integration
    ert-status:
      shortCut: Shift-S
      confirm: false
      description: Certificate status
      scopes:
      - certificates
      command: bash
      background: false
      args:
      - -c
      - "cmctl status certificate --context $CONTEXT -n $NAMESPACE $NAME |& less"
    cert-renew:
      shortCut: Shift-R
      confirm: false
      description: Certificate renew
      scopes:
      - certificates
      command: bash
      background: false
      args:
      - -c
      - "cmctl renew --context $CONTEXT -n $NAMESPACE $NAME |& less"
    secret-inspect:
      shortCut: Shift-I
      confirm: false
      description: Inspect secret
      scopes:
      - secrets
      command: bash
      background: false
      args:
      - -c
      - "cmctl inspect secret --context $CONTEXT -n $NAMESPACE $NAME |& less"

      # Add plugins for HolmesGPT
    holmesgpt:
      shortCut: Shift-H
      description: Ask HolmesGPT
      scopes:
      - all
      command: bash
      background: false
      confirm: false
      args:
      - -c
      - |
        holmes ask "why is $NAME of $RESOURCE_NAME in -n $NAMESPACE not working as expected"
        echo "Press 'q' to exit"
        while : ; do
        read -n 1 k <&1
        if [[ $k = q ]] ; then
        break
        fi
        done

    custom-holmesgpt:
      shortCut: Shift-Q
      description: Custom HolmesGPT Ask
      scopes:
      - all
      command: bash
      background: false
      confirm: false
      args:
      - -c
      - |
        INSTRUCTIONS="# Edit the line below. Lines starting with '#' will be ignored."
        DEFAULT_ASK_COMMAND="why is $NAME of $RESOURCE_NAME in -n $NAMESPACE not working as expected"
        QUESTION_FILE=$(mktemp)

        echo "$INSTRUCTIONS" > "$QUESTION_FILE"
        echo "$DEFAULT_ASK_COMMAND" >> "$QUESTION_FILE"

        # Open the line in the default text editor
        ${EDITOR:-nano} "$QUESTION_FILE"

        # Read the modified line, ignoring lines starting with '#'
        user_input=$(grep -v '^#' "$QUESTION_FILE")
        echo running: holmes ask "\"$user_input\""

        holmes ask "$user_input"
        echo "Press 'q' to exit"
        while : ; do
        read -n 1 k <&1
        if [[ $k = q ]] ; then
        break
        fi
        done
